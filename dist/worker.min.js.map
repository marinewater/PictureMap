{"version":3,"file":"worker.min.js","sources":["../node_modules/exif-ts/src/tags/exif.ts","../node_modules/exif-ts/src/tags/gps.ts","../node_modules/exif-ts/src/tags/ifd1.ts","../node_modules/exif-ts/src/tags/iptc_filed_map.ts","../node_modules/exif-ts/src/tags/string_values.ts","../node_modules/exif-ts/src/tags/tiff.ts","../node_modules/exif-ts/src/xml_to_object.ts","../node_modules/exif-ts/src/exif.ts","../node_modules/exif-ts/src/convert.ts","../node_modules/exif-ts/src/read.ts","../src/ts/worker.ts"],"sourcesContent":["import { IExifTags } from './interface';\n\nexport const exifTags: IExifTags = {\n    // version tags\n    0x9000: 'ExifVersion',             // EXIF version\n    0xA000: 'FlashpixVersion',         // Flashpix format version\n\n    // colorspace tags\n    0xA001: 'ColorSpace',              // Color space information tag\n\n    // image configuration\n    0xA002: 'PixelXDimension',         // Valid width of meaningful image\n    0xA003: 'PixelYDimension',         // Valid height of meaningful image\n    0x9101: 'ComponentsConfiguration', // Information about channels\n    0x9102: 'CompressedBitsPerPixel',  // Compressed bits per pixel\n\n    // user information\n    0x927C: 'MakerNote',               // Any desired information written by the manufacturer\n    0x9286: 'UserComment',             // Comments by user\n\n    // related file\n    0xA004: 'RelatedSoundFile',        // Name of related sound file\n\n    // date and time\n    0x9003: 'DateTimeOriginal',        // Date and time when the original image was generated\n    0x9004: 'DateTimeDigitized',       // Date and time when the image was stored digitally\n    0x9290: 'SubsecTime',              // Fractions of seconds for DateTime\n    0x9291: 'SubsecTimeOriginal',      // Fractions of seconds for DateTimeOriginal\n    0x9292: 'SubsecTimeDigitized',     // Fractions of seconds for DateTimeDigitized\n\n    // picture-taking conditions\n    0x829A: 'ExposureTime',            // Exposure time (in seconds)\n    0x829D: 'FNumber',                 // F number\n    0x8822: 'ExposureProgram',         // Exposure program\n    0x8824: 'SpectralSensitivity',     // Spectral sensitivity\n    0x8827: 'ISOSpeedRatings',         // ISO speed rating\n    0x8828: 'OECF',                    // Optoelectric conversion factor\n    0x9201: 'ShutterSpeedValue',       // Shutter speed\n    0x9202: 'ApertureValue',           // Lens aperture\n    0x9203: 'BrightnessValue',         // Value of brightness\n    0x9204: 'ExposureBias',            // Exposure bias\n    0x9205: 'MaxApertureValue',        // Smallest F number of lens\n    0x9206: 'SubjectDistance',         // Distance to subject in meters\n    0x9207: 'MeteringMode',            // Metering mode\n    0x9208: 'LightSource',             // Kind of light source\n    0x9209: 'Flash',                   // Flash status\n    0x9214: 'SubjectArea',             // Location and area of main subject\n    0x920A: 'FocalLength',             // Focal length of the lens in mm\n    0xA20B: 'FlashEnergy',             // Strobe energy in BCPS\n    0xA20C: 'SpatialFrequencyResponse',    //\n    0xA20E: 'FocalPlaneXResolution',   // Number of pixels in width direction per FocalPlaneResolutionUnit\n    0xA20F: 'FocalPlaneYResolution',   // Number of pixels in height direction per FocalPlaneResolutionUnit\n    0xA210: 'FocalPlaneResolutionUnit',    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n    0xA214: 'SubjectLocation',         // Location of subject in image\n    0xA215: 'ExposureIndex',           // Exposure index selected on camera\n    0xA217: 'SensingMethod',           // Image sensor type\n    0xA300: 'FileSource',              // Image source (3 == DSC)\n    0xA301: 'SceneType',               // Scene type (1 == directly photographed)\n    0xA302: 'CFAPattern',              // Color filter array geometric pattern\n    0xA401: 'CustomRendered',          // Special processing\n    0xA402: 'ExposureMode',            // Exposure mode\n    0xA403: 'WhiteBalance',            // 1 = auto white balance, 2 = manual\n    0xA404: 'DigitalZoomRation',       // Digital zoom ratio\n    0xA405: 'FocalLengthIn35mmFilm',   // Equivalent foacl length assuming 35mm film camera (in mm)\n    0xA406: 'SceneCaptureType',        // Type of scene\n    0xA407: 'GainControl',             // Degree of overall image gain adjustment\n    0xA408: 'Contrast',                // Direction of contrast processing applied by camera\n    0xA409: 'Saturation',              // Direction of saturation processing applied by camera\n    0xA40A: 'Sharpness',               // Direction of sharpness processing applied by camera\n    0xA40B: 'DeviceSettingDescription',    //\n    0xA40C: 'SubjectDistanceRange',    // Distance to subject\n\n    // other tags\n    0xA005: 'InteroperabilityIFDPointer',\n    0xA420: 'ImageUniqueID' // Identifier assigned uniquely to each image\n};\n","import { IExifTags } from './interface';\n\nexport const gpsTags: IExifTags = {\n    0x0000: 'GPSVersionID',\n    0x0001: 'GPSLatitudeRef',\n    0x0002: 'GPSLatitude',\n    0x0003: 'GPSLongitudeRef',\n    0x0004: 'GPSLongitude',\n    0x0005: 'GPSAltitudeRef',\n    0x0006: 'GPSAltitude',\n    0x0007: 'GPSTimeStamp',\n    0x0008: 'GPSSatellites',\n    0x0009: 'GPSStatus',\n    0x000A: 'GPSMeasureMode',\n    0x000B: 'GPSDOP',\n    0x000C: 'GPSSpeedRef',\n    0x000D: 'GPSSpeed',\n    0x000E: 'GPSTrackRef',\n    0x000F: 'GPSTrack',\n    0x0010: 'GPSImgDirectionRef',\n    0x0011: 'GPSImgDirection',\n    0x0012: 'GPSMapDatum',\n    0x0013: 'GPSDestLatitudeRef',\n    0x0014: 'GPSDestLatitude',\n    0x0015: 'GPSDestLongitudeRef',\n    0x0016: 'GPSDestLongitude',\n    0x0017: 'GPSDestBearingRef',\n    0x0018: 'GPSDestBearing',\n    0x0019: 'GPSDestDistanceRef',\n    0x001A: 'GPSDestDistance',\n    0x001B: 'GPSProcessingMethod',\n    0x001C: 'GPSAreaInformation',\n    0x001D: 'GPSDateStamp',\n    0x001E: 'GPSDifferential'\n};\n","// EXIF 2.3 Spec\nimport { IExifTags } from './interface';\n\nexport const ifd1Tags: IExifTags = {\n    0x0100: 'ImageWidth',\n    0x0101: 'ImageHeight',\n    0x0102: 'BitsPerSample',\n    0x0103: 'Compression',\n    0x0106: 'PhotometricInterpretation',\n    0x0111: 'StripOffsets',\n    0x0112: 'Orientation',\n    0x0115: 'SamplesPerPixel',\n    0x0116: 'RowsPerStrip',\n    0x0117: 'StripByteCounts',\n    0x011A: 'XResolution',\n    0x011B: 'YResolution',\n    0x011C: 'PlanarConfiguration',\n    0x0128: 'ResolutionUnit',\n    0x0201: 'JpegIFOffset',    // When image format is JPEG, this value show offset to JPEG data stored.\n                               // (aka 'ThumbnailOffset' or 'JPEGInterchangeFormat')\n    0x0202: 'JpegIFByteCount', // When image format is JPEG, this value shows data size of JPEG image\n                               // (aka 'ThumbnailLength' or 'JPEGInterchangeFormatLength')\n    0x0211: 'YCbCrCoefficients',\n    0x0212: 'YCbCrSubSampling',\n    0x0213: 'YCbCrPositioning',\n    0x0214: 'ReferenceBlackWhite'\n};\n","import { IExifTags } from './interface';\n\nexport const iptcFieldMap: IExifTags = {\n    0x78 : 'caption',\n    0x6E : 'credit',\n    0x19 : 'keywords',\n    0x37 : 'dateCreated',\n    0x50 : 'byline',\n    0x55 : 'bylineTitle',\n    0x7A : 'captionWriter',\n    0x69 : 'headline',\n    0x74 : 'copyright',\n    0x0F : 'category'\n};\n","import { IStringValues } from './interface';\n\nexport const stringValues: IStringValues = {\n    Contrast: {\n        0: 'Normal',\n        1: 'Soft',\n        2: 'Hard'\n    },\n    CustomRendered: {\n        0: 'Normal process',\n        1: 'Custom process'\n    },\n    ExposureProgram: {\n        0: 'Not defined',\n        1: 'Manual',\n        2: 'Normal program',\n        3: 'Aperture priority',\n        4: 'Shutter priority',\n        5: 'Creative program',\n        6: 'Action program',\n        7: 'Portrait mode',\n        8: 'Landscape mode'\n    },\n    FileSource: {\n        3: 'DSC'\n    },\n    Flash: {\n        0x0000: 'Flash did not fire',\n        0x0001: 'Flash fired',\n        0x0005: 'Strobe return light not detected',\n        0x0007: 'Strobe return light detected',\n        0x0009: 'Flash fired, compulsory flash mode',\n        0x000D: 'Flash fired, compulsory flash mode, return light not detected',\n        0x000F: 'Flash fired, compulsory flash mode, return light detected',\n        0x0010: 'Flash did not fire, compulsory flash mode',\n        0x0018: 'Flash did not fire, auto mode',\n        0x0019: 'Flash fired, auto mode',\n        0x001D: 'Flash fired, auto mode, return light not detected',\n        0x001F: 'Flash fired, auto mode, return light detected',\n        0x0020: 'No flash function',\n        0x0041: 'Flash fired, red-eye reduction mode',\n        0x0045: 'Flash fired, red-eye reduction mode, return light not detected',\n        0x0047: 'Flash fired, red-eye reduction mode, return light detected',\n        0x0049: 'Flash fired, compulsory flash mode, red-eye reduction mode',\n        0x004D: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',\n        0x004F: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',\n        0x0059: 'Flash fired, auto mode, red-eye reduction mode',\n        0x005D: 'Flash fired, auto mode, return light not detected, red-eye reduction mode',\n        0x005F: 'Flash fired, auto mode, return light detected, red-eye reduction mode'\n    },\n    GainControl: {\n        0: 'None',\n        1: 'Low gain up',\n        2: 'High gain up',\n        3: 'Low gain down',\n        4: 'High gain down'\n    },\n    LightSource: {\n        0: 'Unknown',\n        1: 'Daylight',\n        2: 'Fluorescent',\n        3: 'Tungsten (incandescent light)',\n        4: 'Flash',\n        9: 'Fine weather',\n        10: 'Cloudy weather',\n        11: 'Shade',\n        12: 'Daylight fluorescent (D 5700 - 7100K)',\n        13: 'Day white fluorescent (N 4600 - 5400K)',\n        14: 'Cool white fluorescent (W 3900 - 4500K)',\n        15: 'White fluorescent (WW 3200 - 3700K)',\n        17: 'Standard light A',\n        18: 'Standard light B',\n        19: 'Standard light C',\n        20: 'D55',\n        21: 'D65',\n        22: 'D75',\n        23: 'D50',\n        24: 'ISO studio tungsten',\n        255: 'Other'\n    },\n    MeteringMode: {\n        0: 'Unknown',\n        1: 'Average',\n        2: 'CenterWeightedAverage',\n        3: 'Spot',\n        4: 'MultiSpot',\n        5: 'Pattern',\n        6: 'Partial',\n        255: 'Other'\n    },\n    Saturation: {\n        0: 'Normal',\n        1: 'Low saturation',\n        2: 'High saturation'\n    },\n    SceneCaptureType: {\n        0: 'Standard',\n        1: 'Landscape',\n        2: 'Portrait',\n        3: 'Night scene'\n    },\n    SceneType: {\n        1: 'Directly photographed'\n    },\n    SensingMethod: {\n        1: 'Not defined',\n        2: 'One-chip color area sensor',\n        3: 'Two-chip color area sensor',\n        4: 'Three-chip color area sensor',\n        5: 'Color sequential area sensor',\n        7: 'Trilinear sensor',\n        8: 'Color sequential linear sensor'\n    },\n    Sharpness: {\n        0: 'Normal',\n        1: 'Soft',\n        2: 'Hard'\n    },\n    SubjectDistanceRange: {\n        0: 'Unknown',\n        1: 'Macro',\n        2: 'Close view',\n        3: 'Distant view'\n    },\n    WhiteBalance: {\n        0: 'Auto white balance',\n        1: 'Manual white balance'\n    },\n\n    Components: {\n        0: '',\n        1: 'Y',\n        2: 'Cb',\n        3: 'Cr',\n        4: 'R',\n        5: 'G',\n        6: 'B'\n    }\n};\n","import { IExifTags } from './interface';\n\nexport const tiffTags: IExifTags = {\n    0x0100: 'ImageWidth',\n    0x0101: 'ImageHeight',\n    0x8769: 'ExifIFDPointer',\n    0x8825: 'GPSInfoIFDPointer',\n    0xA005: 'InteroperabilityIFDPointer',\n    0x0102: 'BitsPerSample',\n    0x0103: 'Compression',\n    0x0106: 'PhotometricInterpretation',\n    0x0112: 'Orientation',\n    0x0115: 'SamplesPerPixel',\n    0x011C: 'PlanarConfiguration',\n    0x0212: 'YCbCrSubSampling',\n    0x0213: 'YCbCrPositioning',\n    0x011A: 'XResolution',\n    0x011B: 'YResolution',\n    0x0128: 'ResolutionUnit',\n    0x0111: 'StripOffsets',\n    0x0116: 'RowsPerStrip',\n    0x0117: 'StripByteCounts',\n    0x0201: 'JPEGInterchangeFormat',\n    0x0202: 'JPEGInterchangeFormatLength',\n    0x012D: 'TransferFunction',\n    0x013E: 'WhitePoint',\n    0x013F: 'PrimaryChromaticities',\n    0x0211: 'YCbCrCoefficients',\n    0x0214: 'ReferenceBlackWhite',\n    0x0132: 'DateTime',\n    0x010E: 'ImageDescription',\n    0x010F: 'Make',\n    0x0110: 'Model',\n    0x0131: 'Software',\n    0x013B: 'Artist',\n    0x8298: 'Copyright'\n};\n","interface IXmlObject {\n    [ name: string ]: IXmlValue | IXmlValue[];\n}\n\ninterface IJsonObject {\n    [ name: string ]: IJsonValue | IJsonValue[];\n}\n\ntype IJsonValue = IJsonObject | string;\ntype IXmlValue = IJsonObject | string;\n\nexport function xml2Object( xml: Document ): IXmlObject | string {\n\n    if ( xml.children.length > 0 ) {\n\n        const obj: IXmlObject = {};\n\n        for ( let i = 0; i < xml.children.length; i++ ) {\n\n            const item = xml.children.item( i );\n            const attributes = item.attributes;\n\n            for ( const idx in attributes ) {\n\n                if ( attributes[ idx ] ) {\n                    const itemAtt = attributes[ idx ];\n                    const dataKey = itemAtt.nodeName;\n                    const dataValue = itemAtt.nodeValue;\n\n                    if ( dataKey !== undefined ) {\n                        obj[ dataKey ] = dataValue;\n                    }\n                }\n\n            }\n\n            const nodeName = item.nodeName;\n\n            if ( typeof ( obj[ nodeName ] ) === 'undefined' ) {\n                obj[ nodeName ] = xml2json( item );\n            }\n            else {\n\n                if ( typeof ( ( obj[ nodeName ] as IXmlValue[] ).push ) === 'undefined' ) {\n\n                    const old = obj[nodeName];\n\n                    obj[ nodeName ] = [];\n                    ( obj[ nodeName ] as IXmlValue[] ).push( old as IXmlValue );\n\n                }\n\n                ( obj[ nodeName ] as IXmlValue[] ).push( xml2json( item ) );\n\n            }\n\n        }\n\n        return obj;\n\n    }\n    else {\n        return xml.textContent;\n    }\n\n}\n\nfunction xml2json( xml: Element ): IJsonObject | string {\n\n    const json: IJsonObject = {};\n\n    if ( xml.nodeType === 1 ) { // element node\n\n        if ( xml.attributes.length > 0 ) {\n\n            json[ '@attributes' ] = {};\n\n            for ( let j = 0; j < xml.attributes.length; j++ ) {\n\n                const attribute = xml.attributes.item( j );\n                ( json[ '@attributes' ] as IJsonObject )[ attribute.nodeName ] = attribute.nodeValue;\n\n            }\n        }\n\n    }\n    else if ( xml.nodeType === 3 ) { // text node\n        return xml.nodeValue;\n    }\n\n    // deal with children\n    if ( xml.hasChildNodes() ) {\n\n        for ( let i = 0; i < xml.childNodes.length; i++ ) {\n\n            const child = xml.childNodes.item( i );\n            const nodeName = child.nodeName;\n\n            if ( json[ nodeName ] == null ) {\n                json[ nodeName ] = xml2json( child as Element );\n            }\n            else {\n\n                if ( ( json[ nodeName ] as IJsonValue[] ).push == null ) {\n                    const old = json[ nodeName ];\n                    json[ nodeName ] = [];\n                    ( json[ nodeName ] as IJsonValue[] ).push( old as IJsonValue );\n                }\n                ( json[ nodeName ] as IJsonValue[] ).push( xml2json( child as Element ) );\n\n            }\n        }\n\n    }\n\n    return json;\n}\n","import { exifTags } from './tags/exif';\nimport { gpsTags } from './tags/gps';\nimport { ifd1Tags } from './tags/ifd1';\nimport { IExifTags } from './tags/interface';\nimport { iptcFieldMap } from './tags/iptc_filed_map';\nimport { stringValues } from './tags/string_values';\nimport { tiffTags } from './tags/tiff';\nimport { xml2Object } from './xml_to_object';\n\nexport interface IImage {\n    exifData?: ITags;\n    iptcData?: IPTCData;\n    xmpData?: IXmpData;\n}\n\ninterface IPTCData {\n    [ fieldName: string ]: string[] | string;\n}\n\ninterface IXmpData {\n    [ fieldName: string ]: string[] | string;\n}\n\nexport interface ITags {\n    blob?: Blob;\n    JpegIFOffset?: number;\n    JpegIFByteCount?: number;\n    thumbnail?: ITags;\n    ExifIFDPointer?: number;\n    GPSInfoIFDPointer?: number;\n    GPSVersionID?: number[] | string;\n    ComponentsConfiguration?: number[] | string;\n    FlashpixVersion?: number[] | string;\n    ExifVersion?: number[] | string;\n    FileSource?: number;\n    [ tag: string ]: TagValue;\n}\n\ntype TagValue = number | number[] | string | Blob | ITags;\n\nexport class Exif {\n\n    public isXmpEnabled = false;\n    private readonly _binaryImage: DataView;\n    private _image: IImage = {};\n\n    constructor( binaryImage: ArrayBuffer ) {\n\n        this._binaryImage = new DataView( binaryImage );\n\n    }\n\n    public getData(): IImage {\n\n        return this._handleBinaryFile();\n\n    }\n\n    public getAllTags(): ITags {\n\n        if ( !this.imageHasData() ) {\n            throw new Error( 'no exif data' );\n        }\n\n        const data = this._image.exifData;\n        const tags: ITags = {};\n\n        for ( const d in data ) {\n\n            if ( data.hasOwnProperty( d ) ) {\n                tags[ d ] = data[ d ];\n            }\n        }\n\n        return tags;\n\n    }\n\n    private imageHasData() {\n\n        return !!( this._image.exifData );\n\n    }\n\n    private _handleBinaryFile(): IImage {\n\n        const exifData = this._findEXIFinJPEG();\n        this._image.exifData = exifData || {};\n\n        const iptcData = this._findIPTCinJPEG();\n        this._image.iptcData = iptcData || {};\n\n        if ( this.isXmpEnabled ) {\n            const xmpData = this._findXMPinJPEG();\n            this._image.xmpData = xmpData || {};\n        }\n\n        return this._image;\n\n    }\n\n    private _findEXIFinJPEG(): ITags {\n\n        if ( ( this._binaryImage.getUint8( 0 ) !== 0xFF ) || ( this._binaryImage.getUint8( 1 ) !== 0xD8 ) ) {\n            throw new Error( 'not a valid jpeg' );\n        }\n\n        let offset = 2;\n        const length = this._binaryImage.byteLength;\n\n        while ( offset < length ) {\n\n            if ( this._binaryImage.getUint8( offset ) !== 0xFF ) {\n                throw new Error( `Not a valid marker at offset ${offset}, ` +\n                    `found: ${this._binaryImage.getUint8( offset )}` );\n            }\n\n            const marker = this._binaryImage.getUint8( offset + 1 );\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if ( marker === 225 ) {\n\n                return this._readEXIFData( offset + 4 );\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            }\n            else {\n                offset += 2 + this._binaryImage.getUint16( offset + 2 );\n            }\n\n        }\n\n    }\n\n    private _findIPTCinJPEG(): IPTCData {\n\n        if ( ( this._binaryImage.getUint8( 0 ) !== 0xFF ) || ( this._binaryImage.getUint8( 1 ) !== 0xD8 ) ) {\n            throw new Error( 'Not a valid JPEG' );\n        }\n\n        let offset = 2;\n        const length = this._binaryImage.byteLength;\n\n        while ( offset < length ) {\n\n            if ( this._isFieldSegmentStart( offset ) ) {\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                let nameHeaderLength = this._binaryImage.getUint8( offset + 7 );\n                if ( nameHeaderLength % 2 !== 0 ) {\n                    nameHeaderLength += 1;\n                }\n\n                // Check for pre photoshop 6 format\n                if ( nameHeaderLength === 0 ) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                const startOffset = offset + 8 + nameHeaderLength;\n                const sectionLength = this._binaryImage.getUint16( offset + 6 + nameHeaderLength );\n\n                return this._readIPTCData( startOffset, sectionLength );\n\n            }\n            // Not the marker, continue searching\n            offset++;\n\n        }\n    }\n\n    private _readIPTCData( startOffset: number, sectionLength: number ) {\n\n        const data: IPTCData = {};\n        let fieldValue;\n        let fieldName;\n        let dataSize;\n        let segmentType;\n        let segmentSize;\n        let segmentStartPos = startOffset;\n\n        while ( segmentStartPos < startOffset + sectionLength ) {\n\n            if ( this._binaryImage.getUint8( segmentStartPos ) === 0x1C &&\n                this._binaryImage.getUint8( segmentStartPos + 1 ) === 0x02 ) {\n\n                segmentType = this._binaryImage.getUint8( segmentStartPos + 2 );\n\n                if ( segmentType in iptcFieldMap ) {\n\n                    dataSize = this._binaryImage.getInt16( segmentStartPos + 3 );\n                    segmentSize = dataSize + 5;\n                    fieldName = iptcFieldMap[segmentType];\n                    fieldValue = this._getStringFromDB( segmentStartPos + 5, dataSize );\n\n                    // Check if we already stored a value with this name\n                    if ( data.hasOwnProperty( fieldName ) ) {\n                        // Value already stored with this name, create multivalue field\n                        if ( data[ fieldName ] instanceof Array ) {\n                            ( data[ fieldName ] as string[] ).push( fieldValue );\n                        }\n                        else {\n                            ( data[ fieldName ] as string[] ) = [ ( data[ fieldName ] as string ), fieldValue ];\n                        }\n                    }\n                    else {\n                        data[ fieldName ] = fieldValue;\n                    }\n\n                }\n\n            }\n\n            segmentStartPos++;\n        }\n\n        return data;\n\n    }\n\n    private _findXMPinJPEG(): IXmpData {\n\n        if ( !( 'DOMParser' in window ) ) {\n            throw new Error( 'XML parsing not supported without DOMParser' );\n        }\n\n        if ( ( this._binaryImage.getUint8( 0 ) !== 0xFF ) || ( this._binaryImage.getUint8( 1 ) !== 0xD8 ) ) {\n            throw new Error( 'Not a valid JPEG' );\n        }\n\n        let offset = 2;\n        const length = this._binaryImage.byteLength;\n        const dom = new DOMParser();\n\n        while ( offset < ( length - 4 ) ) {\n\n            if ( this._getStringFromDB( offset, 4 ) === 'http' ) {\n\n                const startOffset = offset - 1;\n                const sectionLength = this._binaryImage.getUint16( offset - 2 ) - 1;\n                let xmpString = this._getStringFromDB( startOffset, sectionLength );\n                const xmpEndIndex = xmpString.indexOf( 'xmpmeta>' ) + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                const indexOfXmp = xmpString.indexOf( 'x:xmpmeta' ) + 10;\n\n                // Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                // Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice( 0, indexOfXmp )\n                    + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                    + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                    + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                    + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                    + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                    + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                    + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                    + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                    + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                    + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                    + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                    + xmpString.slice( indexOfXmp );\n\n                const domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object( domDocument ) as IXmpData;\n\n            }\n            else {\n                offset++;\n            }\n        }\n\n    }\n\n    private _getStringFromDB( start: number, length: number ): string {\n\n        let outString = '';\n        for ( let n = start; n < start + length; n++ ) {\n            outString += String.fromCharCode( this._binaryImage.getUint8( n ) );\n        }\n\n        return outString;\n\n    }\n\n    private _readTagValue( entryOffset: number, tiffStart: number, bigEnd: boolean ): TagValue {\n\n        const type = this._binaryImage.getUint16( entryOffset + 2, !bigEnd );\n        const numValues = this._binaryImage.getUint32( entryOffset + 4, !bigEnd );\n        const valueOffset = this._binaryImage.getUint32( entryOffset + 8, !bigEnd ) + tiffStart;\n        let offset;\n        let vals;\n        let val;\n        let numerator;\n        let denominator;\n\n        switch ( type ) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if ( numValues === 1 ) {\n                    return this._binaryImage.getUint8( entryOffset + 8 );\n                }\n                else {\n                    offset = numValues > 4 ? valueOffset : ( entryOffset + 8 );\n                    vals = [];\n                    for ( let n = 0; n < numValues; n++ ) {\n                        vals[n] = this._binaryImage.getUint8( offset + n );\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : ( entryOffset + 8 );\n                return this._getStringFromDB( offset, numValues - 1 );\n\n            case 3: // short, 16 bit int\n                if ( numValues === 1 ) {\n                    return this._binaryImage.getUint16( entryOffset + 8, !bigEnd );\n                }\n                else {\n                    offset = numValues > 2 ? valueOffset : ( entryOffset + 8 );\n                    vals = [];\n                    for ( let n = 0; n < numValues; n++ ) {\n                        vals[n] = this._binaryImage.getUint16( offset + 2 * n, !bigEnd );\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if ( numValues === 1 ) {\n                    return this._binaryImage.getUint32( entryOffset + 8, !bigEnd );\n                }\n                else {\n                    vals = [];\n                    for ( let n = 0; n < numValues; n++ ) {\n                        vals[n] = this._binaryImage.getUint32( valueOffset + 4 * n, !bigEnd );\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if ( numValues === 1 ) {\n                    numerator = this._binaryImage.getUint32( valueOffset, !bigEnd );\n                    denominator = this._binaryImage.getUint32( valueOffset + 4, !bigEnd );\n                    val = numerator / denominator;\n                    return val;\n                }\n                else {\n                    vals = [];\n                    for ( let n = 0; n < numValues; n++ ) {\n                        numerator = this._binaryImage.getUint32( valueOffset + 8 * n, !bigEnd );\n                        denominator = this._binaryImage.getUint32( valueOffset + 4 + 8 * n, !bigEnd );\n                        vals[n] = numerator / denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if ( numValues === 1 ) {\n                    return this._binaryImage.getInt32( entryOffset + 8, !bigEnd );\n                }\n                else {\n                    vals = [];\n                    for ( let n = 0; n < numValues; n++ ) {\n                        vals[n] = this._binaryImage.getInt32( valueOffset + 4 * n, !bigEnd );\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if ( numValues === 1 ) {\n                    return this._binaryImage.getInt32( valueOffset, !bigEnd ) /\n                        this._binaryImage.getInt32( valueOffset + 4, !bigEnd );\n                }\n                else {\n                    vals = [];\n                    for ( let n = 0; n < numValues; n++ ) {\n                        vals[n] = this._binaryImage.getInt32( valueOffset + 8 * n, !bigEnd ) /\n                            this._binaryImage.getInt32( valueOffset + 4 + 8 * n, !bigEnd );\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    private _readEXIFData( start: number ): ITags {\n\n        if ( this._getStringFromDB( start, 4 ) !== 'Exif' ) {\n            throw new Error( 'no exif data' );\n        }\n\n        let bigEnd: boolean;\n        let tags: ITags;\n        let tag;\n        let exifData;\n        const tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if ( this._binaryImage.getUint16( tiffOffset ) === 0x4949 ) {\n            bigEnd = false;\n        }\n        else if ( this._binaryImage.getUint16( tiffOffset ) === 0x4D4D ) {\n            bigEnd = true;\n        }\n        else {\n            throw new Error( 'not a valid jpeg' );\n        }\n\n        if ( this._binaryImage.getUint16( tiffOffset + 2, !bigEnd ) !== 0x002A ) {\n            throw new Error( 'not a valid jpeg' );\n        }\n\n        const firstIFDOffset = this._binaryImage.getUint32( tiffOffset + 4, !bigEnd );\n\n        if ( firstIFDOffset < 0x00000008 ) {\n            throw new Error( 'not a valid jpeg' );\n        }\n\n        tags = this._readTags( tiffOffset, tiffOffset + firstIFDOffset, tiffTags, bigEnd );\n\n        if ( tags.ExifIFDPointer ) {\n\n            exifData = this._readTags( tiffOffset, tiffOffset + tags.ExifIFDPointer, exifTags, bigEnd );\n            for ( tag in exifData ) {\n\n                if ( exifData.hasOwnProperty( tag ) ) {\n\n                    switch ( tag ) {\n                        case 'LightSource':\n                        case 'Flash':\n                        case 'MeteringMode':\n                        case 'ExposureProgram':\n                        case 'SensingMethod':\n                        case 'SceneCaptureType':\n                        case 'SceneType':\n                        case 'CustomRendered':\n                        case 'WhiteBalance':\n                        case 'GainControl':\n                        case 'Contrast':\n                        case 'Saturation':\n                        case 'Sharpness':\n                        case 'SubjectDistanceRange':\n                        case 'FileSource':\n                            exifData[ tag ] = stringValues[ tag ][ exifData[ tag ] as number ];\n                            break;\n\n                        case 'ExifVersion':\n                        case 'FlashpixVersion':\n                            exifData[tag] = String.fromCharCode( exifData[ tag ][ 0 ] as number,\n                                exifData[ tag ][ 1 ] as number,\n                                exifData[tag][ 2 ] as number,\n                                exifData[ tag ][ 3 ] as number );\n                            break;\n\n                        case 'ComponentsConfiguration':\n                            exifData[tag] =\n                                stringValues.Components[ ( exifData[ tag ][ 0 ] as number ) ] +\n                                stringValues.Components[ ( exifData[ tag ][ 1 ] as number ) ] +\n                                stringValues.Components[ ( exifData[ tag ][ 2 ] as number ) ] +\n                                stringValues.Components[ ( exifData[ tag ][ 3 ] as number ) ];\n                            break;\n                    }\n                    tags[ tag ] = exifData[ tag ];\n\n                }\n            }\n        }\n\n        if ( tags.GPSInfoIFDPointer ) {\n\n            const gpsData = this._readTags( tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, gpsTags, bigEnd );\n            for ( tag in gpsData ) {\n                if ( gpsData[ tag ] ) {\n                    switch ( tag ) {\n                        case 'GPSVersionID':\n                            gpsData[tag] = gpsData[ tag ][ 0 ] +\n                                '.' + gpsData[ tag ][ 1 ] +\n                                '.' + gpsData[ tag ][ 2 ] +\n                                '.' + gpsData[ tag ][ 3 ];\n                            break;\n                    }\n                    tags[tag] = gpsData[tag];\n                }\n            }\n\n        }\n\n        // extract thumbnail\n        tags.thumbnail = this._readThumbnailImage( tiffOffset, firstIFDOffset, bigEnd );\n\n        return tags;\n    }\n\n    private _readTags( tiffStart: number, dirStart: number, strings: IExifTags, bigEnd: boolean ): ITags {\n\n        const entries = this._binaryImage.getUint16( dirStart, !bigEnd );\n        const tags: ITags = {};\n\n        for ( let i = 0; i < entries; i++ ) {\n\n            const entryOffset = dirStart + i * 12 + 2;\n            const tag = strings[ this._binaryImage.getUint16( entryOffset, !bigEnd ) ];\n            tags[ tag ] = this._readTagValue( entryOffset, tiffStart, bigEnd );\n\n        }\n\n        return tags;\n\n    }\n\n    private _readThumbnailImage( tiffStart: number, firstIFDOffset: number, bigEnd: boolean ): ITags {\n\n        // get the IFD1 offset\n        const ifd1OffsetPointer = this._getNextIFDOffset( tiffStart + firstIFDOffset, bigEnd );\n\n        if ( !ifd1OffsetPointer ) {\n            return {};\n        }\n        else if ( ifd1OffsetPointer > this._binaryImage.byteLength ) { // this should not happen\n            return {};\n        }\n\n        const thumbTags = this._readTags( tiffStart, tiffStart + ifd1OffsetPointer, ifd1Tags, bigEnd );\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n        if ( thumbTags.Compression ) {\n\n            switch ( thumbTags.Compression ) {\n                case 6:\n                    if ( thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount ) {\n                        // extract the thumbnail\n                        const tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        const tLength = thumbTags.JpegIFByteCount;\n                        thumbTags.blob = new Blob( [ new Uint8Array( this._binaryImage.buffer, tOffset, tLength ) ], {\n                            type: 'image/jpeg'\n                        } );\n                    }\n                    break;\n            }\n\n        }\n\n        return thumbTags;\n\n    }\n\n    private _isFieldSegmentStart( offset: number ): boolean {\n\n        return (\n            this._binaryImage.getUint8( offset ) === 0x38 &&\n            this._binaryImage.getUint8( offset + 1 ) === 0x42 &&\n            this._binaryImage.getUint8( offset + 2 ) === 0x49 &&\n            this._binaryImage.getUint8( offset + 3 ) === 0x4D &&\n            this._binaryImage.getUint8( offset + 4 ) === 0x04 &&\n            this._binaryImage.getUint8( offset + 5 ) === 0x04\n        );\n\n    }\n\n    private _getNextIFDOffset( dirStart: number, bigEnd: boolean ): number {\n\n        // the first 2bytes means the number of directory entries contains in this IFD\n        const entries = this._binaryImage.getUint16( dirStart, !bigEnd );\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n        return this._binaryImage.getUint32( dirStart + 2 + entries * 12, !bigEnd ) ; // each entry is 12 bytes long\n\n    }\n\n}\n","export function base64ToArrayBuffer( base64: string ): ArrayBuffer {\n\n    base64 = base64.replace( /^data:([^;]+);base64,/gmi, '' );\n    const binary = atob( base64 );\n    const len = binary.length;\n    const buffer = new ArrayBuffer( len );\n    const view = new Uint8Array( buffer );\n\n    for ( let i = 0; i < len; i++ ) {\n        view[ i ] = binary.charCodeAt( i );\n    }\n\n    return buffer;\n\n}\n","import { base64ToArrayBuffer } from './convert';\n\nfunction read_blob( blob: Blob ): Promise<ArrayBuffer> {\n\n    return new Promise( function( resolve, reject ) {\n\n        const fileReader = new FileReader();\n        fileReader.onload = function( e ) {\n            resolve( e.target.result as ArrayBuffer );\n        };\n\n        fileReader.onerror = ( error ) => reject( error );\n\n        fileReader.readAsArrayBuffer( blob );\n\n    } );\n\n}\n\nfunction read_http( url: string ): Promise<ArrayBuffer> {\n\n    return new Promise( function( resolve, reject ) {\n\n        let http = new XMLHttpRequest();\n        http.onload = function() {\n\n            if ( this.status === 200 || this.status === 0 ) {\n                resolve( http.response );\n            }\n            else {\n                reject( 'Could not load image' );\n            }\n\n            http = null;\n\n        };\n\n        http.open( 'GET', url, true );\n        http.responseType = 'arraybuffer';\n        http.send( null );\n\n    } );\n\n}\n\nfunction read_blob_url( url: string ): Promise<Blob> {\n\n    return new Promise( function( resolve, reject ) {\n\n        const http = new XMLHttpRequest();\n\n        http.open( 'GET', url, true );\n        http.responseType = 'blob';\n\n        http.onload = function() {\n            if ( this.status === 200 || this.status === 0 ) {\n                resolve( this.response );\n            }\n        };\n\n        http.onerror = function( error ) {\n\n            reject( error );\n\n        };\n\n        http.send();\n\n    } );\n\n}\n\nexport function getBinaryData( file: any ): Promise<ArrayBuffer> {\n\n    if ( file.src ) {\n        if ( /^data:/i.test( file.src ) ) { // Data URI\n\n            return Promise.resolve( base64ToArrayBuffer( file.src ) );\n\n        }\n        else if ( /^blob:/i.test( file.src ) ) { // Object URL\n\n            return read_blob_url( file.src )\n                .then( ( blob: Blob ) => read_blob( blob ) );\n\n        }\n        else {\n\n            return read_http( file.src );\n\n        }\n\n    }\n    else if ( FileReader && ( file instanceof Blob || file instanceof File ) ) {\n\n        return read_blob( file );\n\n    }\n    else {\n        return Promise.reject( 'unknown source type' );\n    }\n\n}\n","import { Exif, getBinaryData, ITags } from 'exif-ts';\n\ndeclare const postMessage: ( images: any ) => void;\n\nexport interface IImageData {\n    meta_data: ITags;\n    file_name: string;\n    binary: ArrayBuffer;\n}\n\n/**\n * extracts exif data from image\n * @param {File} image\n * @returns {Promise<IImageData>}\n */\nfunction getImageData( image: File ): Promise<IImageData> {\n\n    return getBinaryData( image )\n        .then( function( buffer ) {\n\n            const exif = new Exif( buffer );\n            exif.getData();\n\n            const tags = exif.getAllTags();\n            return {\n                binary: buffer,\n                file_name: image.name,\n                meta_data: tags\n            };\n\n        } );\n\n}\n\nonmessage = function( e ) {\n\n    const queue = e.data.map( ( i: File ) => getImageData( i ) );\n    Promise.all( queue )\n        .then( function( images ) {\n            postMessage( {\n                images,\n                type: 'success'\n            } );\n        } )\n        .catch( function( error ) {\n            console.error( error );\n            postMessage( {\n                error,\n                type: 'error'\n            } );\n        } );\n\n};\n"],"names":[],"mappings":"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"}