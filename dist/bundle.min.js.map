{"version":3,"file":"bundle.min.js","sources":["../src/ts/dom.ts","../src/ts/exif_map.ts","../src/ts/binary.ts","../src/ts/index.ts"],"sourcesContent":["import { Picture } from './exif_map';\n\n/**\n * removes all child nodes from the provided node\n * @param {Node} node\n */\nexport function removeChildren( node: Node ) {\n\n    while ( node.hasChildNodes() ) {\n        node.removeChild( node.lastChild );\n    }\n\n}\n\n/**\n * adds thumbnails to the image grid\n * @param map\n * @param {HTMLDivElement} image_grid\n * @param {Picture[]} pictures\n */\nexport function addPictures( map: any, image_grid: HTMLDivElement, pictures: Picture[] ) {\n\n    removeChildren( image_grid );\n\n    pictures.forEach( function( p ) {\n\n        const div = document.createElement( 'div' );\n        div.classList.add( 'image' );\n        div.appendChild( pictureFromBlob( p ) );\n\n        if ( p.Marker !== null ) {\n            div.addEventListener( 'click', function() {\n\n                map.setView( p.Marker.getLatLng(), 13, {\n                    animate: true\n                });\n\n                p.Marker.openPopup();\n\n            });\n        }\n        else {\n            div.classList.add( 'no-gps' );\n        }\n\n        image_grid.appendChild( div );\n\n    });\n\n}\n\n/**\n * creates an image element which displays the provided Blob\n * @param {Picture} picture\n * @returns {HTMLImageElement}\n */\nexport function pictureFromBlob( picture: Picture ): HTMLImageElement {\n\n    const img = document.createElement( 'img' );\n    img.src = picture.BlobUrl;\n    img.alt = picture.Name;\n    img.title = picture.Name;\n\n    return img;\n\n}\n\n/**\n * shows the loading bar that indicates that pictures are being processed\n * @param {boolean} show\n */\nexport function show_loader( show: boolean ) {\n\n    const loader = document.querySelector( '.loader' );\n    if ( show === true ) {\n        loader.classList.remove( 'hidden' );\n    }\n    else {\n        loader.classList.add( 'hidden' );\n    }\n\n}\n\n/**\n * greys out the file input element and blocks access to it\n * enables it if disable = false\n * @param {boolean} [disable=true]\n */\nexport function disableFileInput( disable = true ) {\n\n    const fileInput = document.getElementById( 'image' ) as HTMLInputElement;\n    fileInput.disabled = disable;\n\n}\n\n/**\n * shows modal and displays large image preview and exif data\n * @param {Picture} picture\n */\nexport function showModal( picture: Picture ) {\n\n    const modal = document.querySelector( '.modal' ) as HTMLDivElement;\n\n    const modalImageContainer = document.querySelector( '.modal-image-container' ) as HTMLDivElement;\n    removeChildren( modalImageContainer );\n\n    const image = pictureFromBlob( picture );\n    image.classList.add( 'modal-image' );\n    modalImageContainer.appendChild( image );\n\n    const heading = document.querySelector( '.modal-heading h1' ) as HTMLHeadingElement;\n    heading.innerText = picture.Name;\n\n    const modelData = document.querySelector( '.modal-data' ) as HTMLDivElement;\n    removeChildren( modelData );\n    modelData.appendChild( formatExifData( picture ) );\n\n    modal.style.visibility = 'visible';\n\n    const modalClose = document.querySelector( '.modal-close > .close-icon' ) as HTMLDivElement;\n    modalClose.addEventListener( 'click', function ( e ) {\n\n        e.preventDefault();\n        hideModal();\n\n    });\n\n}\n\n/**\n * creates html list for exif data\n * @param {Picture} picture\n * @returns {HTMLUListElement}\n */\nfunction formatExifData( picture: Picture ): HTMLUListElement {\n\n    const ul = document.createElement( 'ul' );\n\n    for ( let key in picture.MetaData ) {\n        if ( picture.MetaData.hasOwnProperty( key ) ) {\n\n            const li = document.createElement( 'li' );\n\n            const b = document.createElement( 'b' );\n            const tagName = document.createTextNode( `${key}: ` );\n            b.appendChild( tagName );\n            li.appendChild( b );\n\n            let tagValue: string;\n\n            if ( Array.isArray( picture.MetaData[ key ] ) ) {\n                tagValue = ( picture.MetaData[ key ] as Array<any> ).join( ', ' );\n            }\n            else if ( typeof picture.MetaData[ key ] === 'object' ) {\n                tagValue = JSON.stringify( picture.MetaData[ key ], null, 4 );\n            }\n            else {\n                tagValue = picture.MetaData[ key ].toString();\n            }\n\n            li.appendChild( document.createTextNode( tagValue ) );\n\n            ul.appendChild( li );\n\n        }\n    }\n\n    return ul;\n}\n\n/**\n * hides the picture/exif data modal\n */\nfunction hideModal() {\n\n    const modal = document.querySelector( '.modal' ) as HTMLDivElement;\n    modal.style.visibility = 'hidden';\n\n}","import { addPictures, disableFileInput, pictureFromBlob, show_loader, showModal } from './dom';\nimport { IImageData } from './worker';\nimport { blobFromBuffer } from './binary';\nimport { ITags } from 'exif-ts/index';\n\n\ninterface lonLat {\n    Latitude: number,\n    Longitude: number,\n}\n\ninterface LonLat {\n    LonLat: lonLat\n    Name: string,\n    BinaryImage: ArrayBuffer,\n    MetaData: ITags\n}\n\nexport interface Picture {\n    Name: string,\n    Marker: any,\n    BlobUrl: string,\n    MetaData: ITags\n}\n\ndeclare const L: any;\n\n\nexport class ExifMap {\n\n    private readonly _imageInputElement: HTMLInputElement;\n    private readonly _imageGrid: HTMLDivElement;\n    private readonly _map: any;\n    private readonly _pictures: Picture[] = [];\n\n    /**\n     * @param {HTMLInputElement} inputElement\n     * @param {HTMLDivElement} image_grid\n     * @param {string} map_id\n     * @constructor\n     */\n    constructor( inputElement: HTMLInputElement, image_grid: HTMLDivElement, map_id: string ) {\n\n        this._imageInputElement = inputElement;\n        this._imageGrid = image_grid;\n\n        this._map = L.map( map_id );\n        L.tileLayer( 'http://tile.stamen.com/terrain/{z}/{x}/{y}.jpg', {\n            attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n            maxZoom: 16\n        } ).addTo( this._map );\n        this._map.setView( [ 51.502654, -0.124225 ], 10 );\n\n    }\n\n    /**\n     * gets images from input file, extracts the exif data and adds them as marker to the map\n     * @returns {Promise<void>}\n     */\n    public getData(): Promise<void> {\n\n        disableFileInput();\n        show_loader( true );\n        const exif_data: File[] = [];\n\n        for ( let i = 0; i < this._imageInputElement.files.length; i++ ) {\n            exif_data.push( this._imageInputElement.files[ i ] );\n        }\n\n        return this._getImageData( exif_data )\n            .then( lon_lat => this._renderMap( lon_lat ) )\n            .then( () => this._list_images() )\n            .then( () => show_loader( false ) )\n            .then( () => disableFileInput( false ) );\n\n    }\n\n    /**\n     * sends files to a webworker to extract EXIF data\n     * @param {File[]} files\n     * @returns {Promise<LonLat[]>}\n     * @private\n     */\n    private _getImageData( files: File[] ): Promise<LonLat[]> {\n\n        return new Promise( function ( resolve, reject ) {\n\n            const worker = new Worker( 'dist/worker.min.js' );\n\n            worker.onmessage = e => {\n                resolve( e.data.map( function ( i: IImageData ) {\n                    return <LonLat>{\n                        LonLat: ExifMap._parseGeoData( i.meta_data ),\n                        Name: i.file_name,\n                        BinaryImage: i.binary,\n                        MetaData: i.meta_data\n                    };\n                } ) );\n                worker.terminate();\n            };\n            worker.onerror = error => {\n                reject( error );\n                worker.terminate();\n            };\n\n            worker.postMessage( files );\n\n        } );\n\n    }\n\n    /**\n     * zooms and pans the map to make all markers visible\n     */\n    zoomToAll() {\n\n        const filtered_pictures = this._pictures.filter( p => p.Marker !== null );\n        if ( filtered_pictures.length > 0 ) {\n            const markers = filtered_pictures.map( p => p.Marker );\n            const group = new L.featureGroup( markers );\n\n            this._map.fitBounds( group.getBounds() );\n        }\n\n    }\n\n    /**\n     * extracts geo data from EXIF tags\n     * @param meta_data\n     * @returns {lonLat | null}\n     * @private\n     */\n    private static _parseGeoData( meta_data: any ): lonLat | null {\n\n        if ( typeof meta_data.GPSLatitude === 'undefined' ||\n            typeof meta_data.GPSLatitudeRef === 'undefined' ||\n            typeof meta_data.GPSLongitude === 'undefined' ||\n            typeof meta_data.GPSLongitudeRef === 'undefined'\n        ) {\n            return null;\n        }\n        else {\n            return {\n                Latitude: ExifMap._convertDMSToDD(\n                    parseInt( meta_data.GPSLatitude[ 0 ], 10 ),\n                    parseInt( meta_data.GPSLatitude[ 1 ], 10 ),\n                    parseFloat( meta_data.GPSLatitude[ 2 ] ),\n                    meta_data.GPSLatitudeRef\n                ),\n                Longitude: ExifMap._convertDMSToDD(\n                    parseInt( meta_data.GPSLongitude[ 0 ], 10 ),\n                    parseInt( meta_data.GPSLongitude[ 1 ], 10 ),\n                    parseFloat( meta_data.GPSLongitude[ 2 ] ),\n                    meta_data.GPSLongitudeRef\n                )\n            };\n        }\n    }\n\n    /**\n     * converts a geo location from degrees, minutes, and seconds to decimal coordinates\n     * @param {number} degrees\n     * @param {number} minutes\n     * @param {number} seconds\n     * @param {string} direction\n     * @returns {number}\n     * @private\n     */\n    private static _convertDMSToDD( degrees: number, minutes: number, seconds: number, direction: string ): number {\n\n        let dd = degrees + minutes / 60 + seconds / (60 * 60);\n\n        if ( direction == 'S' || direction == 'W' ) {\n            dd *= -1;\n        }\n\n        return dd;\n\n    }\n\n    /**\n     * adds the markers to the map\n     * @param {LonLat[]} lon_lat\n     * @private\n     */\n    private _renderMap( lon_lat: LonLat[] ) {\n\n        const _this = this;\n\n        const markers: any[] = [];\n\n        lon_lat.forEach( function ( position ) {\n\n            const picture: Picture = {\n                Marker: null,\n                Name: position.Name,\n                BlobUrl: blobFromBuffer( position.BinaryImage ),\n                MetaData: position.MetaData\n            };\n\n            if ( position.LonLat !== null ) {\n\n                const div = document.createElement( 'div' );\n\n                const p = document.createElement( 'p' );\n                const text = document.createTextNode( position.Name );\n                p.appendChild( text );\n                div.appendChild( p );\n\n                const image = pictureFromBlob( picture );\n                image.addEventListener( 'click', () => showModal( picture ) );\n                div.appendChild( image );\n\n                const marker = L.marker( [ position.LonLat.Latitude, position.LonLat.Longitude ] ).addTo( _this._map );\n                marker\n                    .bindPopup( div )\n                    .openPopup();\n                markers.push( marker );\n                picture.Marker = marker;\n            }\n\n            _this._pictures.push( picture );\n\n        } );\n\n        if ( markers.length > 0 ) {\n            const group = new L.featureGroup( markers );\n            this._map.fitBounds( group.getBounds() );\n        }\n\n    }\n\n    /**\n     * displays thumbnail images on the grid\n     * @private\n     */\n    private _list_images() {\n\n        const pictures = this._pictures\n            .sort( ( a, b ) => a.Name.localeCompare( b.Name, undefined, { sensitivity: 'base' } ) );\n\n        addPictures( this._map, this._imageGrid, pictures );\n\n    }\n\n}","/**\n * creates a Blob from the provided buffer and returns the blob url\n * @param {ArrayBuffer} buffer\n * @returns {string}\n */\nexport function blobFromBuffer( buffer: ArrayBuffer ): string {\n\n    const arrayBufferView = new Uint8Array( buffer );\n    const blob = new Blob( [ arrayBufferView ], { type: 'image/jpeg' } );\n\n    const urlCreator = window.URL || ( window as any ).webkitURL;\n    return urlCreator.createObjectURL( blob );\n\n}","import { ExifMap } from './exif_map';\n\nfunction main() {\n\n    const image = <HTMLInputElement>document.getElementById( 'image' );\n    const image_grid = <HTMLDivElement>document.getElementById( 'image-grid' );\n    const exif_map = new ExifMap( image, image_grid,'map' );\n\n    image.addEventListener( 'change', () => exif_map.getData() );\n    ( <HTMLAnchorElement>document.getElementById( 'fit-all' ) )\n        .addEventListener( 'click', function ( e ) {\n\n        e.preventDefault();\n        exif_map.zoomToAll();\n\n    });\n\n}\n\nwindow.addEventListener( 'DOMContentLoaded', () => main(), true );"],"names":["node","hasChildNodes","removeChild","lastChild","picture","img","document","createElement","src","BlobUrl","alt","Name","title","show","loader","querySelector","classList","remove","add","disable","getElementById","disabled","modal","modalImageContainer","removeChildren","image","pictureFromBlob","appendChild","innerText","modelData","ul","key","MetaData","hasOwnProperty","li","b","tagName","createTextNode","tagValue","Array","isArray","join","JSON","stringify","toString","formatExifData","style","visibility","addEventListener","e","preventDefault","inputElement","image_grid","map_id","this","_imageInputElement","_imageGrid","_map","L","map","tileLayer","attribution","maxZoom","addTo","setView","ExifMap","disableFileInput","show_loader","exif_data","i","files","length","push","_getImageData","then","lon_lat","_this_1","_renderMap","_list_images","Promise","resolve","reject","worker","Worker","onmessage","data","LonLat","_parseGeoData","meta_data","file_name","BinaryImage","binary","terminate","onerror","error","postMessage","filtered_pictures","_pictures","filter","p","Marker","markers","group","featureGroup","fitBounds","getBounds","GPSLatitude","GPSLatitudeRef","GPSLongitude","GPSLongitudeRef","Latitude","_convertDMSToDD","parseInt","parseFloat","Longitude","degrees","minutes","seconds","direction","dd","_this","forEach","position","buffer","arrayBufferView","blob","Uint8Array","Blob","type","window","URL","webkitURL","createObjectURL","div","text","showModal","marker","bindPopup","openPopup","pictures","sort","a","localeCompare","undefined","sensitivity","getLatLng","animate","exif_map","getData","zoomToAll"],"mappings":"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"}