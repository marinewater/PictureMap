{"version":3,"file":"bundle.min.js","sources":["../src/ts/dom.ts","../src/ts/exif_map.ts","../src/ts/binary.ts","../src/ts/index.ts"],"sourcesContent":["import { IPicture } from './exif_map';\n\n/**\n * removes all child nodes from the provided node\n * @param {Node} node\n */\nexport function removeChildren( node: Node ) {\n\n    while ( node.hasChildNodes() ) {\n        node.removeChild( node.lastChild );\n    }\n\n}\n\n/**\n * adds thumbnails to the image grid\n * @param map\n * @param {HTMLDivElement} imageGrid\n * @param {IPicture[]} pictures\n */\nexport function addPictures( map: any, imageGrid: HTMLDivElement, pictures: IPicture[] ) {\n\n    removeChildren( imageGrid );\n\n    pictures.forEach( function( p ) {\n\n        const div = document.createElement( 'div' );\n        div.classList.add( 'image' );\n        div.appendChild( pictureFromBlob( p ) );\n\n        if ( p.Marker !== null ) {\n            div.addEventListener( 'click', function() {\n\n                map.setView( p.Marker.getLatLng(), 13, {\n                    animate: true\n                } );\n\n                p.Marker.openPopup();\n\n            } );\n        }\n        else {\n            div.classList.add( 'no-gps' );\n        }\n\n        imageGrid.appendChild( div );\n\n    } );\n\n}\n\n/**\n * creates an image element which displays the provided Blob\n * @param {IPicture} picture\n * @returns {HTMLImageElement}\n */\nexport function pictureFromBlob( picture: IPicture ): HTMLImageElement {\n\n    const img = document.createElement( 'img' );\n    img.src = picture.BlobUrl;\n    img.alt = picture.Name;\n    img.title = picture.Name;\n\n    return img;\n\n}\n\n/**\n * shows the loading bar that indicates that pictures are being processed\n * @param {boolean} show\n */\nexport function show_loader( show: boolean ) {\n\n    const loader = document.querySelector( '.loader' );\n    if ( show === true ) {\n        loader.classList.remove( 'hidden' );\n    }\n    else {\n        loader.classList.add( 'hidden' );\n    }\n\n}\n\n/**\n * greys out the file input element and blocks access to it\n * enables it if disable = false\n * @param {boolean} [disable=true]\n */\nexport function disableFileInput( disable = true ) {\n\n    const fileInput = document.getElementById( 'image' ) as HTMLInputElement;\n    fileInput.disabled = disable;\n\n}\n\n/**\n * shows modal and displays large image preview and exif data\n * @param {IPicture} picture\n */\nexport function showModal( picture: IPicture ) {\n\n    const modal = document.querySelector( '.modal' ) as HTMLDivElement;\n\n    const modalImageContainer = document.querySelector( '.modal-image-container' ) as HTMLDivElement;\n    removeChildren( modalImageContainer );\n\n    const image = pictureFromBlob( picture );\n    image.classList.add( 'modal-image' );\n    modalImageContainer.appendChild( image );\n\n    const heading = document.querySelector( '.modal-heading h1' ) as HTMLHeadingElement;\n    heading.innerText = picture.Name;\n\n    const modelData = document.querySelector( '.modal-data' ) as HTMLDivElement;\n    removeChildren( modelData );\n    modelData.appendChild( formatExifData( picture ) );\n\n    modal.style.visibility = 'visible';\n\n    const modalClose = document.querySelector( '.modal-close > .close-icon' ) as HTMLDivElement;\n    modalClose.addEventListener( 'click', function( e ) {\n\n        e.preventDefault();\n        hideModal();\n\n    } );\n\n}\n\n/**\n * creates html list for exif data\n * @param {IPicture} picture\n * @returns {HTMLUListElement}\n */\nfunction formatExifData( picture: IPicture ): HTMLUListElement {\n\n    const ul = document.createElement( 'ul' );\n\n    for ( const key in picture.MetaData ) {\n        if ( picture.MetaData.hasOwnProperty( key ) ) {\n\n            const li = document.createElement( 'li' );\n\n            const b = document.createElement( 'b' );\n            const tagName = document.createTextNode( `${key}: ` );\n            b.appendChild( tagName );\n            li.appendChild( b );\n\n            let tagValue: string;\n\n            if ( Array.isArray( picture.MetaData[ key ] ) ) {\n                tagValue = ( picture.MetaData[ key ] as any[] ).join( ', ' );\n            }\n            else if ( typeof picture.MetaData[ key ] === 'object' ) {\n                tagValue = JSON.stringify( picture.MetaData[ key ], null, 4 );\n            }\n            else {\n                tagValue = picture.MetaData[ key ].toString();\n            }\n\n            li.appendChild( document.createTextNode( tagValue ) );\n\n            ul.appendChild( li );\n\n        }\n    }\n\n    return ul;\n}\n\n/**\n * hides the picture/exif data modal\n */\nfunction hideModal() {\n\n    const modal = document.querySelector( '.modal' ) as HTMLDivElement;\n    modal.style.visibility = 'hidden';\n\n}\n","import { ITags } from 'exif-ts/index';\nimport { blobFromBuffer } from './binary';\nimport { addPictures, disableFileInput, pictureFromBlob, show_loader, showModal } from './dom';\nimport { IImageData } from './worker';\n\ninterface ILonLat {\n    Latitude: number;\n    Longitude: number;\n}\n\ninterface IPosition {\n    LonLat: ILonLat;\n    Name: string;\n    BinaryImage: ArrayBuffer;\n    MetaData: ITags;\n}\n\nexport interface IPicture {\n    Name: string;\n    Marker: any;\n    BlobUrl: string;\n    MetaData: ITags;\n}\n\ndeclare const L: any;\n\nexport class ExifMap {\n\n    /**\n     * converts a geo location from degrees, minutes, and seconds to decimal coordinates\n     * @param {number} degrees\n     * @param {number} minutes\n     * @param {number} seconds\n     * @param {string} direction\n     * @returns {number}\n     * @private\n     */\n    private static _convertDMSToDD( degrees: number, minutes: number, seconds: number, direction: string ): number {\n\n        let dd = degrees + minutes / 60 + seconds / ( 60 * 60 );\n\n        if ( direction === 'S' || direction === 'W' ) {\n            dd *= -1;\n        }\n\n        return dd;\n\n    }\n\n    /**\n     * extracts geo data from EXIF tags\n     * @param metaData\n     * @returns {ILonLat | null}\n     * @private\n     */\n    private static _parseGeoData( metaData: any ): ILonLat | null {\n\n        if ( typeof metaData.GPSLatitude === 'undefined' ||\n            typeof metaData.GPSLatitudeRef === 'undefined' ||\n            typeof metaData.GPSLongitude === 'undefined' ||\n            typeof metaData.GPSLongitudeRef === 'undefined'\n        ) {\n            return null;\n        }\n        else {\n            return {\n                Latitude: ExifMap._convertDMSToDD(\n                    parseInt( metaData.GPSLatitude[ 0 ], 10 ),\n                    parseInt( metaData.GPSLatitude[ 1 ], 10 ),\n                    parseFloat( metaData.GPSLatitude[ 2 ] ),\n                    metaData.GPSLatitudeRef\n                ),\n                Longitude: ExifMap._convertDMSToDD(\n                    parseInt( metaData.GPSLongitude[ 0 ], 10 ),\n                    parseInt( metaData.GPSLongitude[ 1 ], 10 ),\n                    parseFloat( metaData.GPSLongitude[ 2 ] ),\n                    metaData.GPSLongitudeRef\n                )\n            };\n        }\n    }\n\n    private readonly _imageInputElement: HTMLInputElement;\n    private readonly _imageGrid: HTMLDivElement;\n    private readonly _map: any;\n    private readonly _pictures: IPicture[] = [];\n\n    /**\n     * @param {HTMLInputElement} inputElement\n     * @param {HTMLDivElement} imageGrid\n     * @param {string} mapId\n     * @constructor\n     */\n    constructor( inputElement: HTMLInputElement, imageGrid: HTMLDivElement, mapId: string ) {\n\n        this._imageInputElement = inputElement;\n        this._imageGrid = imageGrid;\n\n        this._map = L.map( mapId );\n        L.tileLayer( 'http://tile.stamen.com/terrain/{z}/{x}/{y}.jpg', {\n            attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under ' +\n            '<a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ' +\n            'Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under ' +\n            '<a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.',\n            maxZoom: 16\n        } ).addTo( this._map );\n        this._map.setView( [ 51.502654, -0.124225 ], 10 );\n\n    }\n\n    /**\n     * gets images from input file, extracts the exif data and adds them as marker to the map\n     * @returns {Promise<void>}\n     */\n    public getData(): Promise<void> {\n\n        disableFileInput();\n        show_loader( true );\n        const exifData: File[] = [];\n\n        for ( let i = 0; i < this._imageInputElement.files.length; i++ ) {\n            exifData.push( this._imageInputElement.files[ i ] );\n        }\n\n        return this._getImageData( exifData )\n            .then( ( lonLat ) => this._renderMap( lonLat ) )\n            .then( () => this._list_images() )\n            .then( () => show_loader( false ) )\n            .then( () => disableFileInput( false ) )\n            .catch( function( error ) {\n\n                console.error( error );\n                show_loader( false );\n                disableFileInput( false );\n\n            } );\n\n    }\n\n    /**\n     * zooms and pans the map to make all markers visible\n     */\n    public zoomToAll() {\n\n        const filteredPictures = this._pictures.filter( ( p ) => p.Marker !== null );\n        if ( filteredPictures.length > 0 ) {\n            const markers = filteredPictures.map( ( p ) => p.Marker );\n            const group = new L.featureGroup( markers );\n\n            this._map.fitBounds( group.getBounds() );\n        }\n\n    }\n\n    /**\n     * sends files to a webworker to extract EXIF data\n     * @param {File[]} files\n     * @returns {Promise<IPosition[]>}\n     * @private\n     */\n    private _getImageData( files: File[] ): Promise<IPosition[]> {\n\n        return new Promise( function( resolve, reject ) {\n\n            const worker = new Worker( 'dist/worker.min.js' );\n\n            worker.onmessage = ( e: any ) => {\n                if ( e.data.type === 'success' ) {\n                    resolve( e.data.images.map( function( i: IImageData ) {\n                        return {\n                            BinaryImage: i.binary,\n                            LonLat: ExifMap._parseGeoData( i.meta_data ),\n                            MetaData: i.meta_data,\n                            Name: i.file_name\n                        } as IPosition;\n                    } ) );\n                }\n                else {\n                    reject( e );\n                }\n                worker.terminate();\n            };\n            worker.onerror = ( error ) => {\n                reject( error );\n                worker.terminate();\n            };\n\n            worker.postMessage( files );\n\n        } );\n\n    }\n\n    /**\n     * displays thumbnail images on the grid\n     * @private\n     */\n    private _list_images() {\n\n        const pictures = this._pictures\n            .sort( ( a, b ) => a.Name.localeCompare( b.Name, undefined, { sensitivity: 'base' } ) );\n\n        addPictures( this._map, this._imageGrid, pictures );\n\n    }\n\n    /**\n     * adds the markers to the map\n     * @param {IPosition[]} positions\n     * @private\n     */\n    private _renderMap( positions: IPosition[] ) {\n\n        const _this = this;\n\n        const markers: any[] = [];\n\n        positions.forEach( function( position ) {\n\n            const picture: IPicture = {\n                BlobUrl: blobFromBuffer( position.BinaryImage ),\n                Marker: null,\n                MetaData: position.MetaData,\n                Name: position.Name\n            };\n\n            if ( position.LonLat !== null ) {\n\n                const div = document.createElement( 'div' );\n\n                const p = document.createElement( 'p' );\n                const text = document.createTextNode( position.Name );\n                p.appendChild( text );\n                div.appendChild( p );\n\n                const image = pictureFromBlob( picture );\n                image.addEventListener( 'click', () => showModal( picture ) );\n                div.appendChild( image );\n\n                const marker = L.marker( [ position.LonLat.Latitude, position.LonLat.Longitude ] ).addTo( _this._map );\n                marker\n                    .bindPopup( div )\n                    .openPopup();\n                markers.push( marker );\n                picture.Marker = marker;\n            }\n\n            _this._pictures.push( picture );\n\n        } );\n\n        if ( markers.length > 0 ) {\n            const group = new L.featureGroup( markers );\n            this._map.fitBounds( group.getBounds() );\n        }\n\n    }\n\n}\n","/**\n * creates a Blob from the provided buffer and returns the blob url\n * @param {ArrayBuffer} buffer\n * @returns {string}\n */\nexport function blobFromBuffer( buffer: ArrayBuffer ): string {\n\n    const arrayBufferView = new Uint8Array( buffer );\n    const blob = new Blob( [ arrayBufferView ], { type: 'image/jpeg' } );\n\n    const urlCreator = window.URL || ( window as any ).webkitURL;\n    return urlCreator.createObjectURL( blob );\n\n}\n","import { ExifMap } from './exif_map';\n\nfunction main() {\n\n    const image = document.getElementById( 'image' ) as HTMLInputElement;\n    const imageGrid = document.getElementById( 'image-grid' ) as HTMLDivElement;\n    const exifMap = new ExifMap( image, imageGrid, 'map' );\n\n    image.addEventListener( 'change', () => exifMap.getData() );\n    ( document.getElementById( 'fit-all' ) as HTMLButtonElement )\n        .addEventListener( 'click', function( e ) {\n\n        e.preventDefault();\n        exifMap.zoomToAll();\n\n    } );\n\n}\n\nwindow.addEventListener( 'DOMContentLoaded', () => main(), true );\n"],"names":["node","hasChildNodes","removeChild","lastChild","picture","img","document","createElement","src","BlobUrl","alt","Name","title","show","loader","querySelector","classList","remove","add","disable","getElementById","disabled","modal","modalImageContainer","removeChildren","image","pictureFromBlob","appendChild","innerText","modelData","ul","key","MetaData","hasOwnProperty","li","b","tagName","createTextNode","tagValue","Array","isArray","join","JSON","stringify","toString","formatExifData","style","visibility","addEventListener","e","preventDefault","inputElement","imageGrid","mapId","this","_imageInputElement","_imageGrid","_map","L","map","tileLayer","attribution","maxZoom","addTo","setView","ExifMap","degrees","minutes","seconds","direction","dd","metaData","GPSLatitude","GPSLatitudeRef","GPSLongitude","GPSLongitudeRef","Latitude","_convertDMSToDD","parseInt","parseFloat","Longitude","disableFileInput","show_loader","exifData","i","files","length","push","_getImageData","then","lonLat","_this_1","_renderMap","_list_images","catch","error","console","filteredPictures","_pictures","filter","p","Marker","markers","group","featureGroup","fitBounds","getBounds","Promise","resolve","reject","worker","Worker","onmessage","data","type","images","BinaryImage","binary","LonLat","_parseGeoData","meta_data","file_name","terminate","onerror","postMessage","pictures","sort","a","localeCompare","undefined","sensitivity","forEach","div","getLatLng","animate","openPopup","positions","_this","position","buffer","arrayBufferView","blob","Uint8Array","Blob","window","URL","webkitURL","createObjectURL","text","showModal","marker","bindPopup","exifMap","getData","zoomToAll"],"mappings":"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"}