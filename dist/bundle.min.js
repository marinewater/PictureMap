(function () {
    'use strict';

    /**
     * creates a Blob from the provided buffer and returns the blob url
     * @param {ArrayBuffer} buffer
     * @returns {string}
     */
    function blobFromBuffer(buffer) {
        var arrayBufferView = new Uint8Array(buffer);
        var blob = new Blob([arrayBufferView], { type: 'image/jpeg' });
        var urlCreator = window.URL || window.webkitURL;
        return urlCreator.createObjectURL(blob);
    }

    /**
     * removes all child nodes from the provided node
     * @param {Node} node
     */
    function removeChildren(node) {
        while (node.hasChildNodes()) {
            node.removeChild(node.lastChild);
        }
    }
    /**
     * adds thumbnails to the image grid
     * @param map
     * @param {HTMLDivElement} imageGrid
     * @param {IPicture[]} pictures
     */
    function addPictures(map, imageGrid, pictures) {
        removeChildren(imageGrid);
        pictures.forEach(function (p) {
            var div = document.createElement('div');
            div.classList.add('image');
            div.appendChild(pictureFromBlob(p));
            if (p.Marker !== null) {
                div.addEventListener('click', function () {
                    map.setView(p.Marker.getLatLng(), 13, {
                        animate: true
                    });
                    p.Marker.openPopup();
                });
            }
            else {
                div.classList.add('no-gps');
            }
            imageGrid.appendChild(div);
        });
    }
    /**
     * creates an image element which displays the provided Blob
     * @param {IPicture} picture
     * @returns {HTMLImageElement}
     */
    function pictureFromBlob(picture) {
        var img = document.createElement('img');
        img.src = picture.BlobUrl;
        img.alt = picture.Name;
        img.title = picture.Name;
        return img;
    }
    /**
     * shows the loading bar that indicates that pictures are being processed
     * @param {boolean} show
     */
    function show_loader(show) {
        var loader = document.querySelector('.loader');
        if (show === true) {
            loader.classList.remove('hidden');
        }
        else {
            loader.classList.add('hidden');
        }
    }
    /**
     * greys out the file input element and blocks access to it
     * enables it if disable = false
     * @param {boolean} [disable=true]
     */
    function disableFileInput(disable) {
        if (disable === void 0) { disable = true; }
        var fileInput = document.getElementById('image');
        fileInput.disabled = disable;
    }
    /**
     * shows modal and displays large image preview and exif data
     * @param {IPicture} picture
     */
    function showModal(picture) {
        var modal = document.querySelector('.modal');
        var modalImageContainer = document.querySelector('.modal-image-container');
        removeChildren(modalImageContainer);
        var image = pictureFromBlob(picture);
        image.classList.add('modal-image');
        modalImageContainer.appendChild(image);
        var heading = document.querySelector('.modal-heading h1');
        heading.innerText = picture.Name;
        var modelData = document.querySelector('.modal-data');
        removeChildren(modelData);
        modelData.appendChild(formatExifData(picture));
        modal.style.visibility = 'visible';
        var modalClose = document.querySelector('.modal-close > .close-icon');
        modalClose.addEventListener('click', function (e) {
            e.preventDefault();
            hideModal();
        });
    }
    /**
     * creates html list for exif data
     * @param {IPicture} picture
     * @returns {HTMLUListElement}
     */
    function formatExifData(picture) {
        var ul = document.createElement('ul');
        for (var key in picture.MetaData) {
            if (picture.MetaData.hasOwnProperty(key)) {
                var li = document.createElement('li');
                var b = document.createElement('b');
                var tagName = document.createTextNode(key + ": ");
                b.appendChild(tagName);
                li.appendChild(b);
                var tagValue = void 0;
                if (Array.isArray(picture.MetaData[key])) {
                    tagValue = picture.MetaData[key].join(', ');
                }
                else if (typeof picture.MetaData[key] === 'object') {
                    tagValue = JSON.stringify(picture.MetaData[key], null, 4);
                }
                else {
                    tagValue = picture.MetaData[key].toString();
                }
                li.appendChild(document.createTextNode(tagValue));
                ul.appendChild(li);
            }
        }
        return ul;
    }
    /**
     * hides the picture/exif data modal
     */
    function hideModal() {
        var modal = document.querySelector('.modal');
        modal.style.visibility = 'hidden';
    }

    var ExifMap = /** @class */ (function () {
        /**
         * @param {HTMLInputElement} inputElement
         * @param {HTMLDivElement} imageGrid
         * @param {string} mapId
         * @constructor
         */
        function ExifMap(inputElement, imageGrid, mapId) {
            this._pictures = [];
            this._imageInputElement = inputElement;
            this._imageGrid = imageGrid;
            this._map = L.map(mapId);
            L.tileLayer('http://tile.stamen.com/terrain/{z}/{x}/{y}.jpg', {
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under ' +
                    '<a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. ' +
                    'Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under ' +
                    '<a href="http://www.openstreetmap.org/copyright">ODbL</a>.',
                maxZoom: 16
            }).addTo(this._map);
            this._map.setView([51.502654, -0.124225], 10);
        }
        /**
         * converts a geo location from degrees, minutes, and seconds to decimal coordinates
         * @param {number} degrees
         * @param {number} minutes
         * @param {number} seconds
         * @param {string} direction
         * @returns {number}
         * @private
         */
        ExifMap._convertDMSToDD = function (degrees, minutes, seconds, direction) {
            var dd = degrees + minutes / 60 + seconds / (60 * 60);
            if (direction === 'S' || direction === 'W') {
                dd *= -1;
            }
            return dd;
        };
        /**
         * extracts geo data from EXIF tags
         * @param metaData
         * @returns {ILonLat | null}
         * @private
         */
        ExifMap._parseGeoData = function (metaData) {
            if (typeof metaData.GPSLatitude === 'undefined' ||
                typeof metaData.GPSLatitudeRef === 'undefined' ||
                typeof metaData.GPSLongitude === 'undefined' ||
                typeof metaData.GPSLongitudeRef === 'undefined') {
                return null;
            }
            else {
                return {
                    Latitude: ExifMap._convertDMSToDD(parseInt(metaData.GPSLatitude[0], 10), parseInt(metaData.GPSLatitude[1], 10), parseFloat(metaData.GPSLatitude[2]), metaData.GPSLatitudeRef),
                    Longitude: ExifMap._convertDMSToDD(parseInt(metaData.GPSLongitude[0], 10), parseInt(metaData.GPSLongitude[1], 10), parseFloat(metaData.GPSLongitude[2]), metaData.GPSLongitudeRef)
                };
            }
        };
        /**
         * gets images from input file, extracts the exif data and adds them as marker to the map
         * @returns {Promise<void>}
         */
        ExifMap.prototype.getData = function () {
            var _this_1 = this;
            disableFileInput();
            show_loader(true);
            var exifData = [];
            for (var i = 0; i < this._imageInputElement.files.length; i++) {
                exifData.push(this._imageInputElement.files[i]);
            }
            return this._getImageData(exifData)
                .then(function (lonLat) { return _this_1._renderMap(lonLat); })
                .then(function () { return _this_1._list_images(); })
                .then(function () { return show_loader(false); })
                .then(function () { return disableFileInput(false); });
        };
        /**
         * zooms and pans the map to make all markers visible
         */
        ExifMap.prototype.zoomToAll = function () {
            var filteredPictures = this._pictures.filter(function (p) { return p.Marker !== null; });
            if (filteredPictures.length > 0) {
                var markers = filteredPictures.map(function (p) { return p.Marker; });
                var group = new L.featureGroup(markers);
                this._map.fitBounds(group.getBounds());
            }
        };
        /**
         * sends files to a webworker to extract EXIF data
         * @param {File[]} files
         * @returns {Promise<IPosition[]>}
         * @private
         */
        ExifMap.prototype._getImageData = function (files) {
            return new Promise(function (resolve, reject) {
                var worker = new Worker('dist/worker.min.js');
                worker.onmessage = function (e) {
                    resolve(e.data.map(function (i) {
                        return {
                            BinaryImage: i.binary,
                            LonLat: ExifMap._parseGeoData(i.meta_data),
                            MetaData: i.meta_data,
                            Name: i.file_name
                        };
                    }));
                    worker.terminate();
                };
                worker.onerror = function (error) {
                    reject(error);
                    worker.terminate();
                };
                worker.postMessage(files);
            });
        };
        /**
         * displays thumbnail images on the grid
         * @private
         */
        ExifMap.prototype._list_images = function () {
            var pictures = this._pictures
                .sort(function (a, b) { return a.Name.localeCompare(b.Name, undefined, { sensitivity: 'base' }); });
            addPictures(this._map, this._imageGrid, pictures);
        };
        /**
         * adds the markers to the map
         * @param {IPosition[]} positions
         * @private
         */
        ExifMap.prototype._renderMap = function (positions) {
            var _this = this;
            var markers = [];
            positions.forEach(function (position) {
                var picture = {
                    BlobUrl: blobFromBuffer(position.BinaryImage),
                    Marker: null,
                    MetaData: position.MetaData,
                    Name: position.Name
                };
                if (position.LonLat !== null) {
                    var div = document.createElement('div');
                    var p = document.createElement('p');
                    var text = document.createTextNode(position.Name);
                    p.appendChild(text);
                    div.appendChild(p);
                    var image = pictureFromBlob(picture);
                    image.addEventListener('click', function () { return showModal(picture); });
                    div.appendChild(image);
                    var marker = L.marker([position.LonLat.Latitude, position.LonLat.Longitude]).addTo(_this._map);
                    marker
                        .bindPopup(div)
                        .openPopup();
                    markers.push(marker);
                    picture.Marker = marker;
                }
                _this._pictures.push(picture);
            });
            if (markers.length > 0) {
                var group = new L.featureGroup(markers);
                this._map.fitBounds(group.getBounds());
            }
        };
        return ExifMap;
    }());

    function main() {
        var image = document.getElementById('image');
        var imageGrid = document.getElementById('image-grid');
        var exifMap = new ExifMap(image, imageGrid, 'map');
        image.addEventListener('change', function () { return exifMap.getData(); });
        document.getElementById('fit-all')
            .addEventListener('click', function (e) {
            e.preventDefault();
            exifMap.zoomToAll();
        });
    }
    window.addEventListener('DOMContentLoaded', function () { return main(); }, true);

}());
//# sourceMappingURL=bundle.min.js.map
